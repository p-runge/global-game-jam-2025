import {
  DndContext,
  type DragEndEvent,
  type DragStartEvent,
} from "@dnd-kit/core";
import Head from "next/head";
import { Card } from "~/components/card";
import Draggable from "~/components/draggable";
import Droppable from "~/components/droppable";
import { Frame } from "~/components/frame";
import { useGameManager } from "~/hooks/game-manager";
import { useDraggingManager, type DroppableId } from "~/hooks/dragging-manager";

export default function Home() {
  const { cardLocations } = useGameManager();
  const { startDragging, moveItem, draggable } = useDraggingManager();

  function handleDragStart(event: DragStartEvent) {
    const { active } = event;

    if (!active?.id || !active.data.current) return;

    const droppableIds = active.data.current.droppableIds as DroppableId[];

    const allCardsInGame = Object.values(cardLocations).reduce(
      (acc, cards) => [...acc, ...cards],
      [],
    );

    const draggingCard = allCardsInGame.find((card) => card.id === active.id);
    if (!draggingCard) return;

    startDragging({
      id: draggingCard.id,
      droppableIds,
    });
  }

  const handleDragEnd = (event: DragEndEvent) => {
    const { active, over } = event;

    if (!over?.id) return;

    if (typeof active?.id !== "string") {
      console.error("Active id is not a string");
      return;
    }
    if (typeof over?.id !== "string") {
      console.error("Over id is not a string");
      return;
    }

    if (over) {
      moveItem(active.id, over.id as DroppableId);
    }
  };

  return (
    <Frame>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <DndContext onDragStart={handleDragStart} onDragEnd={handleDragEnd}>
        <div className="relative h-full bg-blue-500">
          {/* game board anchor */}
          <div className="absolute left-1/2 top-1/2">
            {/* opponent */}
            <div className="absolute -top-[305px] left-[550px] -translate-x-1/2">
              <div className="h-card w-card bg-black text-white">
                {cardLocations["opponent-discard-pile"].map((card) => (
                  <div key={card.id}>
                    <Card card={card}></Card>
                  </div>
                ))}
              </div>
            </div>

            <div className="absolute -top-[305px] -translate-x-1/2">
              <div className="flex h-card w-[900px] bg-red-400">
                {cardLocations["opponent-board"].map((card) => (
                  <div key={card.id}>
                    {draggable?.droppableIds.find(
                      (id) => id === `opponent-card-${card.id}`,
                    ) ? (
                      <Droppable id={`opponent-card-${card.id}`}>
                        <Card card={card}></Card>
                      </Droppable>
                    ) : (
                      <Card card={card}></Card>
                    )}
                  </div>
                ))}
              </div>
            </div>

            <div className="absolute -left-[550px] -top-[305px] -translate-x-1/2">
              <div className="h-card w-card bg-green-400">
                {cardLocations["opponent-deck"].map((card) => (
                  <div key={card.id}>
                    <Card card={card}></Card>
                  </div>
                ))}
              </div>
            </div>

            {/* player */}
            <div className="absolute -bottom-[305px] left-[550px] -translate-x-1/2">
              <div className="h-card w-card bg-green-400">
                {cardLocations["player-deck"].map((card) => (
                  <div key={card.id}>
                    <Card card={card}></Card>
                  </div>
                ))}
              </div>
            </div>

            <div className="absolute -bottom-[305px] -translate-x-1/2">
              <Droppable id="player-board">
                <div className="flex h-card w-[900px] bg-red-400">
                  {cardLocations["player-board"].map((card) => (
                    <div key={card.id}>
                      <Draggable
                        id={card.id}
                        droppableIds={cardLocations["opponent-board"]
                          .filter(
                            (c) =>
                              card.type === "monster" &&
                              c.type === "monster" &&
                              c.currentSize < card.currentSize,
                          )
                          .map((c) => `opponent-card-${c.id}` as DroppableId)}
                      >
                        <Card card={card}></Card>
                      </Draggable>
                    </div>
                  ))}
                </div>
              </Droppable>
            </div>

            <div className="absolute -bottom-[305px] right-[550px] translate-x-1/2">
              <div className="h-card w-card bg-black text-white">
                {cardLocations["player-discard-pile"].map((card) => (
                  <div key={card.id}>
                    <Card card={card}></Card>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* hands */}
          <div className="absolute left-1/2 top-0 -translate-x-1/2">
            <div className="pointer-events-none grid grid-cols-7 grid-rows-1">
              {cardLocations["opponent-hand"].map((card) => (
                <div
                  key={card.id}
                  className="pointer-events-auto origin-top scale-50"
                >
                  <Card card={card}></Card>
                </div>
              ))}
            </div>
          </div>
          <div className="absolute bottom-0 left-1/2 -translate-x-1/2">
            <div className="pointer-events-none grid grid-cols-7 grid-rows-1">
              {cardLocations["player-hand"].map((card) => (
                <div
                  key={card.id}
                  className="pointer-events-auto -mx-[45px] origin-bottom scale-50 transition-transform hover:z-10 hover:scale-100"
                >
                  <Draggable id={card.id} droppableIds={["player-board"]}>
                    <Card card={card}></Card>
                  </Draggable>
                </div>
              ))}
            </div>
          </div>
        </div>
      </DndContext>
    </Frame>
  );
}

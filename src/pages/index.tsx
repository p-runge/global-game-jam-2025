import { DndContext, type DragEndEvent } from "@dnd-kit/core";
import Head from "next/head";
import { CARDS } from "~/assets/cards";
import { Board } from "~/components/board";
import { Card, type TCard } from "~/components/card";
import { Deck } from "~/components/deck";
import DiscardPile from "~/components/discard-pile";
import Draggable from "~/components/draggable";
import Droppable from "~/components/droppable";
import { Frame } from "~/components/frame";
import {
  useDroppableManager,
  type DroppableId,
} from "~/hooks/droppable-manager";
import type { TBoard } from "~/types/TBoard";

const initialData: Record<DroppableId, TCard[]> = {
  "player-hand": CARDS.filter((_, i) => i % 2 === 0),
  "player-board": CARDS.filter((_, i) => i % 2 === 1),
};

const opponentsHandCards: TCard[] = [];

export default function Home() {
  const opponentBoard: TBoard = {
    name: "opponent",
    isOpponent: true,
  };
  const playerBoard: TBoard = {
    name: "player",
    isOpponent: false,
  };

  const { droppables, moveItem } = useDroppableManager(initialData);

  const handleDragEnd = (event: DragEndEvent) => {
    const { active, over } = event;

    if (!over?.id) return;

    if (typeof active?.id !== "string") {
      console.error("Active id is not a string");
      return;
    }
    if (typeof over?.id !== "string") {
      console.error("Over id is not a string");
      return;
    }

    const activeDroppableId = active.data.current?.droppableId as
      | DroppableId
      | undefined;
    if (!activeDroppableId) return;

    if (over) {
      moveItem(active.id, activeDroppableId, over.id as DroppableId);
    }
  };

  return (
    <Frame>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <DndContext onDragEnd={handleDragEnd}>
        <div className="relative h-full bg-blue-500">
          {/* game board anchor */}
          <div className="absolute left-1/2 top-1/2">
            {/* temp center marker */}
            <div className="absolute z-10 h-4 w-4 -translate-x-1/2 -translate-y-1/2 bg-amber-500"></div>
            {/* opponent */}
            <div className="absolute -top-[305px] left-[550px] -translate-x-1/2">
              <DiscardPile
                discardPile={{
                  name: "opponent",
                  isOpponent: true,
                }}
              />
            </div>
            <div className="absolute -top-[305px] -translate-x-1/2">
              <Board board={opponentBoard}>{null}</Board>
            </div>
            <div className="absolute -left-[550px] -top-[305px] -translate-x-1/2">
              <Deck deck={{ name: "opponent", isOpponent: true }}></Deck>
            </div>
            {/* player */}
            <div className="absolute -bottom-[305px] left-[550px] -translate-x-1/2">
              <Deck deck={{ name: "player", isOpponent: false }}></Deck>
            </div>
            <div className="absolute -bottom-[305px] -translate-x-1/2">
              <Droppable id="player-board">
                <Board board={playerBoard}>
                  {droppables["player-board"].map((card) => (
                    <div key={card.id}>
                      <Draggable
                        id={card.id}
                        droppableId="player-board"
                        isDraggable={false}
                      >
                        <Card card={card}></Card>
                      </Draggable>
                    </div>
                  ))}
                </Board>
              </Droppable>
            </div>
            <div className="absolute -bottom-[305px] right-[550px] translate-x-1/2">
              <DiscardPile
                discardPile={{
                  name: "player",
                  isOpponent: false,
                }}
              />
            </div>
          </div>
          {/* hands */}
          <div className="absolute left-1/2 top-0 -translate-x-1/2">
            <div className="pointer-events-none grid grid-cols-7 grid-rows-1">
              {opponentsHandCards.map((card) => (
                <div
                  key={card.id}
                  className="pointer-events-auto origin-top scale-50"
                >
                  <Card card={card}></Card>
                </div>
              ))}
            </div>
          </div>
          <div className="absolute bottom-0 left-1/2 -translate-x-1/2">
            <div className="pointer-events-none grid grid-cols-7 grid-rows-1">
              {droppables["player-hand"].map((card) => (
                <div
                  key={card.id}
                  className="pointer-events-auto -mx-[45px] origin-bottom scale-50 transition-transform hover:z-10 hover:scale-100"
                >
                  <Draggable
                    id={card.id}
                    droppableId="player-hand"
                    isDraggable={true}
                  >
                    <Card card={card}></Card>
                  </Draggable>
                </div>
              ))}
            </div>
          </div>
        </div>
      </DndContext>
    </Frame>
  );
}
